// Copyright 2021 hardcore-os Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
JadeDB 文件操作模块

本模块提供了 JadeDB 中所有文件操作的统一接口和实现，包括：
- SSTable 文件的读写操作
- WAL 文件的顺序写入
- 值日志文件的随机访问
- 清单文件的元数据管理

核心设计原则：
1. 统一接口：所有文件类型都实现相同的核心接口
2. 高性能：针对不同文件类型优化访问模式
3. 可靠性：提供数据完整性保证和错误恢复
4. 跨平台：支持不同操作系统的文件系统特性

文件类型：
- SSTable：不可变的排序字符串表，用于存储压缩后的数据
- WAL：预写日志，保证写入操作的持久性
- VLog：值日志，存储大值数据，支持垃圾回收
- Manifest：清单文件，记录数据库的元数据信息

性能优化：
- 内存映射：对于只读文件使用 mmap 提高访问速度
- 缓冲写入：对于写入密集的文件使用缓冲区
- 异步同步：在适当时机异步刷新数据到磁盘
- 预分配：预先分配文件空间，减少碎片化
*/

package file

import "io"

// Options 定义了文件操作的完整配置选项。
// 这个结构体包含了创建、打开和管理文件所需的所有参数。
//
// 设计考虑：
// 1. 灵活性：支持多种文件操作模式和配置
// 2. 一致性：所有文件类型使用统一的选项结构
// 3. 扩展性：便于添加新的配置选项
// 4. 兼容性：支持不同平台的文件系统特性
//
// 使用场景：
// - 创建新的数据库文件
// - 打开现有文件进行读写
// - 配置文件的性能参数
// - 设置文件的安全和权限选项
type Options struct {
	// 文件标识和命名

	// FID 是文件的唯一标识符。
	// 在 JadeDB 中，每个文件都有一个唯一的数字 ID。
	// 用于文件管理、引用和垃圾回收。
	// SSTable 和值日志文件都使用这个 ID 作为文件名的一部分。
	FID uint64

	// FileName 指定文件的完整名称（包含扩展名）。
	// 例如："000001.sst"、"000001.vlog"、"MANIFEST"等。
	// 用于在文件系统中创建和访问文件。
	FileName string

	// Dir 指定文件所在的目录路径。
	// 通常是数据库的工作目录。
	// 所有数据库文件都存储在这个目录中。
	Dir string

	// Path 是文件的完整绝对路径。
	// 通常由 Dir 和 FileName 组合而成。
	// 用于直接访问文件，避免路径拼接错误。
	Path string

	// 文件操作配置

	// Flag 指定文件的打开模式和权限。
	// 使用标准的 os.O_* 常量组合。
	// 常见的组合：
	// - os.O_RDONLY: 只读模式
	// - os.O_WRONLY: 只写模式
	// - os.O_RDWR: 读写模式
	// - os.O_CREATE: 如果不存在则创建
	// - os.O_APPEND: 追加模式
	// - os.O_SYNC: 同步写入
	Flag int

	// MaxSz 指定文件的最大字节大小。
	// 用于：
	// 1. 预分配文件空间，减少碎片化
	// 2. 限制文件增长，防止磁盘空间耗尽
	// 3. 触发文件轮转，如 WAL 文件的切换
	// 4. 优化内存映射的大小
	// 设置为 0 表示不限制文件大小。
	MaxSz int
}

// CoreFile 定义了 JadeDB 中所有文件类型的统一操作接口。
// 这个接口抽象了不同文件类型的共同操作，提供一致的访问方式。
//
// 设计目标：
// 1. 统一性：所有文件类型都实现相同的核心操作
// 2. 灵活性：支持不同文件类型的特定优化
// 3. 可测试性：便于创建模拟实现进行单元测试
// 4. 可扩展性：便于添加新的文件类型和操作
//
// 实现类型：
// - SSTable：不可变的排序字符串表
// - WAL：预写日志文件
// - VLog：值日志文件
// - Manifest：清单文件
//
// 使用模式：
// - 创建文件后立即设置必要的配置
// - 使用完毕后及时关闭释放资源
// - 在适当时机同步数据到磁盘
// - 通过统一接口简化上层逻辑
type CoreFile interface {
	// 生命周期管理

	// Close 关闭文件并释放所有相关资源。
	// 这个方法应该在文件使用完毕后调用，确保：
	// 1. 所有缓冲的数据都被写入磁盘
	// 2. 文件句柄被正确释放
	// 3. 内存映射被取消映射
	// 4. 相关的系统资源被清理
	//
	// 返回值：
	// 如果关闭过程中发生错误，返回错误信息
	//
	// 注意事项：
	// - 关闭后的文件不应再被使用
	// - 重复关闭应该是安全的（幂等操作）
	// - 应该在 defer 语句中调用以确保资源释放
	Close() error

	// 文件操作

	// Truncature 将文件截断到指定的字节长度。
	// 如果指定长度小于当前文件大小，文件会被截断；
	// 如果指定长度大于当前文件大小，文件会被扩展（通常用零填充）。
	//
	// 参数说明：
	// n: 文件的新长度（字节）
	//
	// 返回值：
	// 如果截断操作失败，返回错误信息
	//
	// 使用场景：
	// - 清空文件内容（n=0）
	// - 移除文件末尾的无效数据
	// - 预分配文件空间
	// - 实现文件的原子更新
	Truncature(n int64) error

	// ReName 重命名文件。
	// 这个操作通常是原子的，可以用于实现文件的原子更新。
	//
	// 参数说明：
	// name: 新的文件名（可以包含路径）
	//
	// 返回值：
	// 如果重命名操作失败，返回错误信息
	//
	// 使用场景：
	// - 实现原子文件更新（写入临时文件后重命名）
	// - 文件归档和整理
	// - 实现文件的版本管理
	//
	// 注意事项：
	// - 跨文件系统的重命名可能不是原子的
	// - 目标文件如果存在可能会被覆盖
	ReName(name string) error

	// 读取操作

	// NewReader 创建一个从指定位置开始读取的 Reader。
	// 返回的 Reader 可以用于流式读取文件内容。
	//
	// 参数说明：
	// offset: 开始读取的字节偏移量
	//
	// 返回值：
	// 返回一个 io.Reader 接口，用于读取文件数据
	//
	// 使用场景：
	// - 流式处理大文件
	// - 从文件中间位置开始读取
	// - 实现文件的分块读取
	//
	// 性能考虑：
	// - 对于大文件，流式读取比一次性读取更节省内存
	// - 可能使用缓冲区来优化小块读取的性能
	NewReader(offset int) io.Reader

	// Bytes 从文件中读取指定范围的字节数据。
	// 这是一个便捷方法，用于读取文件的特定部分。
	//
	// 参数说明：
	// off: 读取的起始字节偏移量
	// sz: 要读取的字节数
	//
	// 返回值：
	// 读取到的字节数组和可能的错误信息
	//
	// 使用场景：
	// - 读取文件头部信息
	// - 读取特定的数据块
	// - 实现随机访问读取
	//
	// 注意事项：
	// - 返回的字节数组是新分配的，调用者拥有所有权
	// - 如果请求的范围超出文件大小，可能返回部分数据或错误
	Bytes(off, sz int) ([]byte, error)

	// 内存管理

	// AllocateSlice 为文件中的指定区域分配字节数组。
	// 这个方法可能使用内存映射或其他优化技术。
	//
	// 参数说明：
	// sz: 要分配的字节数组大小
	// offset: 分配区域的起始偏移量
	//
	// 返回值：
	// 分配的字节数组、实际分配的大小和可能的错误信息
	//
	// 使用场景：
	// - 高性能的文件访问
	// - 零拷贝的数据操作
	// - 内存映射文件的访问
	//
	// 注意事项：
	// - 返回的字节数组可能直接映射到文件内容
	// - 修改返回的数组可能直接影响文件内容
	// - 需要注意内存对齐和访问边界
	AllocateSlice(sz, offset int) ([]byte, int, error)

	// 持久化操作

	// Sync 强制将文件内容同步到磁盘。
	// 确保所有缓冲的写入操作都被持久化到存储设备。
	//
	// 返回值：
	// 如果同步操作失败，返回错误信息
	//
	// 使用场景：
	// - 确保关键数据的持久性
	// - 实现事务的提交点
	// - 在系统关闭前保证数据安全
	//
	// 性能考虑：
	// - 同步操作可能比较耗时，应谨慎使用
	// - 可以批量进行同步操作以提高效率
	// - 某些文件系统提供异步同步选项
	Sync() error

	// 文件管理

	// Delete 删除文件。
	// 从文件系统中永久删除这个文件。
	//
	// 返回值：
	// 如果删除操作失败，返回错误信息
	//
	// 使用场景：
	// - 清理过期的数据文件
	// - 实现垃圾回收机制
	// - 释放磁盘空间
	//
	// 注意事项：
	// - 删除操作通常是不可逆的
	// - 应该在确认文件不再需要后才删除
	// - 可能需要特殊权限才能删除某些文件
	Delete() error

	// 高级访问

	// Slice 获取文件中从指定偏移量开始的字节数组视图。
	// 这个方法可能返回直接映射到文件内容的字节数组。
	//
	// 参数说明：
	// offset: 获取数据的起始字节偏移量
	//
	// 返回值：
	// 从指定位置开始的字节数组视图
	//
	// 使用场景：
	// - 高性能的文件访问
	// - 避免数据拷贝的零拷贝操作
	// - 内存映射文件的直接访问
	//
	// 注意事项：
	// - 返回的数组可能直接指向文件内容
	// - 文件内容的变化可能影响返回的数组
	// - 需要注意并发访问的安全性
	Slice(offset int) []byte
}
